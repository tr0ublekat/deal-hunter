import asyncio

from aiogram import types
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from sqlalchemy import delete
from sqlalchemy.future import select


from config import *
from main import dp, bot
from database import async_session
from models import User, Product

import time
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from undetected_geckodriver import Firefox
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

options = Options()
options.add_argument("--headless")
driver = Firefox(options=options)

@dp.message(F.text.lower() == "–¥–∞")
async def delete_user(message: types.Message):
    try:
        async with async_session() as session:
            user = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = user.scalar()

            if not user:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=types.ReplyKeyboardRemove())
                return

            await session.execute(
                delete(Product).where(Product.user_id == user.id)
            )

            await session.execute(
                delete(User).where(User.id == user.id)
            )

            await session.commit()

        await message.answer(f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!", reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text.lower() == "–Ω–µ—Ç")
async def dont_delete_user(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("start"))
async def create_user(message: types.Message):
    async with async_session() as session:
        new_user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
        )
        session.add(new_user)
        try:
            await session.commit()
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! üëã\n"
                "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã. üõí\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∏ —è –Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ —Ü–µ–Ω—É. üìâ\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: DNS\n\n"
                "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
                "/add <url>- –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
                "/remove <url> - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
                "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
            )

        except Exception as e:
            await session.rollback()
            kb = [
                [
                    types.KeyboardButton(text="–î–∞"),
                    types.KeyboardButton(text="–ù–µ—Ç")
                ]
            ]
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
                input_field_placeholder="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã?"
            )
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã!\n–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?", reply_markup=keyboard)

@dp.message(Command("help"))
async def nothing(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã. üõí\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∏ —è –Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ —Ü–µ–Ω—É. üìâ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: DNS\n\n"
        "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/add <url>- –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/remove <url> - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
    )

async def check_product(url: str):
    try:
        driver.get(url)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'product-card-top__title'))
        )
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'product-buy__price'))
        )

        if "dns-shop.ru" in url:
            title = driver.find_element(By.CLASS_NAME, 'product-card-top__title').text
            value = driver.find_element(By.CLASS_NAME, 'product-buy__price')

            try:
                old_value = value.find_element(By.CLASS_NAME, 'product-buy__prev')
                temp = value.text
                value = ''
                for t in temp:
                    value += t
                    if (t == ' ') or (t.isdigit()):
                        pass
                    else:
                        break

            except Exception as e:
                value = value.text

            parts = value.split()
            price = "".join(parts[:-1])  # –í—Å–µ —á–∞—Å—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            curr = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –≤–∞–ª—é—Ç–∞

            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                  f"–¶–µ–Ω–∞: {price}\n"
                  f"–í–∞–ª—é—Ç–∞: {curr}")

            return title, price, curr
        elif "ozon.ru" in url:
            ...
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ! {e}")
        return None


@dp.message(Command("add"))
async def add_product(message: types.Message, command: CommandObject):
    try:
        args = command.args.split(" ")
        url = args[0]
        await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        result = await check_product(url)
        if result is None:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")

        else:
            title = str(result[0])
            price = float(result[1])
            curr = str(result[2])

            async with async_session() as session:
                current_user_result = await session.execute(
                    select(User).where(User.telegram_id == message.from_user.id)
                )
                current_user = current_user_result.scalar()

                if not current_user:
                    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
                    return

                existing_product = await session.execute(
                    select(Product).where(Product.url == url, Product.user_id == current_user.id)
                )
                existing_product = existing_product.scalar()

                if existing_product:
                    await message.reply("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                    return

                session.add(Product(
                    name=title,
                    price=price,
                    currency=curr,
                    url=url,
                    user_id=current_user.id,
                ))
                await session.commit()
            await message.reply("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!\n–®–∞–±–ª–æ–Ω: /add <url>")
        print(f"–û—à–∏–±–∫–∞: {e}")
        return

    async with async_session() as session:
        pass

@dp.message(Command("remove"))
async def remove_product(message: types.Message, command: CommandObject):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ URL
        if not command.args:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /remove <url>")
            return

        url = command.args.strip()  # –ü–æ–ª—É—á–∞–µ–º URL

        async with async_session() as session:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user_result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            current_user = current_user_result.scalar()

            if not current_user:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
                return

            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ URL –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            product_result = await session.execute(
                select(Product).where(Product.url == url, Product.user_id == current_user.id)
            )
            product = product_result.scalar()

            if not product:
                await message.reply("–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
                return

            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await session.delete(product)
            await session.commit()

            await message.reply(f"–¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö!")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("list"))
async def get_products(message: types.Message):
    try:
        async with async_session() as session:
            current_user_result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            current_user = current_user_result.scalar()

            if not current_user:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
                return

            products_result = await session.execute(
                select(Product).where(Product.user_id == current_user.id)
            )
            products = products_result.scalars().all()

            if not products:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ
            for product in products:
                await message.answer(
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price} {product.currency}\n"
                    f"–°—Å—ã–ª–∫–∞: {product.url}"
                )

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤!")
        print(e)

@dp.message()
async def nothing(message: types.Message):
    await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")



async def fetch_product_price(url: str):
    try:
        driver.get(url)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'product-card-top__title'))
        )
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'product-buy__price'))
        )

        if "dns-shop.ru" in url:
            value = driver.find_element(By.CLASS_NAME, 'product-buy__price').text
            parts = value.split()
            price = "".join(parts[:-1])  # –í—Å–µ —á–∞—Å—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            curr = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –≤–∞–ª—é—Ç–∞
            return price, curr
        elif "ozon.ru" in url:
            ...
        else:
            return None, None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None, None

async def check_prices_periodically():
    print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã!")
    while True:
        try:
            async with async_session() as session:
                products_result = await session.execute(select(Product))
                products = products_result.scalars().all()

                for product in products:
                    new_price, new_currency = await fetch_product_price(product.url)

                    if new_price is None:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.name}")
                        continue

                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if float(new_price) != product.price:
                        print(f"–¶–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç {product.name} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!")
                        user_result = await session.execute(select(User).where(User.id == product.user_id))
                        user = user_result.scalar()

                        if user:
                            await bot.send_message(
                                chat_id=user.telegram_id,
                                text=(
                                    f"–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞: *{product.name}*\n"
                                    f"–ë—ã–ª–æ: {product.price} {product.currency}\n"
                                    f"–°—Ç–∞–ª–æ: {new_price} {new_currency}\n\n"
                                    f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä]({product.url})"
                                ),
                                parse_mode=ParseMode.HTML
                            )

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        product.price = float(new_price)
                        product.currency = new_currency
                        session.add(product)

                await session.commit()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ: {e}")

        # –ñ–¥—ë–º 30 –º–∏–Ω—É—Ç
        await asyncio.sleep(TIMEOUT_FOR_UPDATING)